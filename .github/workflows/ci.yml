name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add Google Chrome GPG key (modern, fixed)
        run: |
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-chrome.gpg > /dev/null
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'      
      - name: Install latest Google Chrome
        run: |
          wget -q -O /usr/share/keyrings/google-chrome.gpg https://dl-ssl.google.com/linux/linux_signing_key.pub
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable    
      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true
      - name: Verify Browser Setup
        run: |
          echo "Chrome version:"
          google-chrome --version
          echo "ChromeDriver version:"
          chromedriver --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Start HTTP Server for UI Tests
        run: |
          # Start Python HTTP server in background for Selenium tests
          python -m http.server 8001 &
          SERVER_PID=$!
          echo "HTTP_SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          echo "Waiting for HTTP server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8001 > /dev/null; then
              echo "HTTP server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for HTTP server to start"
              exit 1
            fi
            sleep 1
          done

      - name: Health Check
        run: |
          echo "Browser setup verified"
          echo "Server health check:"
          curl -I http://localhost:8001 || echo "Server not reachable"

      - name: Run tests
        run: make test

      - name: Stop HTTP Server
        if: always()
        run: |
          if [ -n "$HTTP_SERVER_PID" ]; then
            kill $HTTP_SERVER_PID || true
          fi

      - name: Run coverage
        run: make coverage
